//Ogre基础教程5，帧监听，带缓冲输入的，2015.10.5

#include "ExampleApplication.h"

class TutorialFrameListener:public ExampleFrameListener,public OIS::MouseListener,public OIS::KeyListener  
	// 公有继承例子中帧监听,OIS系统中的鼠标和键盘监听器类
{
public:
		TutorialFrameListener(RenderWindow *win,Camera *cam,SceneManager *sceneMgr)
			:ExampleFrameListener(win,cam,true,true)
	{
		mCamNode = cam->getParentSceneNode();
		mSceneMgr = sceneMgr;
		//设置旋转和移动速度
		mRotate = 0.13;
		mMove = 250;
		//继续渲染
		mContinue = true;
		//把这个类注册成一个监听器
		mMouse->setEventCallback(this);
		mKeyboard->setEventCallback(this);
		//将移动摄像机节点的位移初始化为零
		mDirection = Vector3::ZERO;
	}

	bool frameStarted(const FrameEvent &evt)
	{
		if(mMouse)
		mMouse->capture();
		if(mKeyboard)
		mKeyboard->capture();

		//对mDirection进行更新
		mCamNode->translate(mDirection *evt.timeSinceLastFrame,Node::TS_LOCAL);

		return mContinue;
	}
		//鼠标监听器
		bool mouseMoved(const OIS::MouseEvent &e)
		{
			if(e.state.buttonDown(OIS::MB_Right))
			{
				mCamNode->yaw(Degree(-mRotate *e.state.X.rel),Node::TS_WORLD);
				mCamNode->pitch(Degree(-mRotate *e.state.Y.rel),Node::TS_LOCAL);
			}
			return true;
		}
		
		bool mousePressed(const OIS::MouseEvent &e,OIS::MouseButtonID id)
		{
			Light *light=mSceneMgr->getLight("light1");
			switch(id)
			{
			case OIS::MB_Left:
				light->setVisible(!light->isVisible());
				break;

			}
			return true;
		}
		bool mouseReleased(const OIS::MouseEvent &e,OIS::MouseButtonID id)
		{	return true;}
		//键盘监听器,当键盘被按下时的反应
		bool keyPressed(const OIS::KeyEvent &e)
		{
			switch(e.key)
			{
			case OIS::KC_ESCAPE:
				mContinue = false;
				break;
				//1,2键用来切换视场
			case OIS::KC_1: 
                mCamera->getParentSceneNode()->detachObject(mCamera);
				mCamNode = mSceneMgr->getSceneNode("CamNode1");
				mCamNode ->attachObject(mCamera);
				break;
			case OIS::KC_2:
				mCamera->getParentSceneNode()->detachObject(mCamera);
				mCamNode = mSceneMgr->getSceneNode("CamNode2");
				mCamNode->attachObject(mCamera);
				break;

			case OIS::KC_UP:
			case OIS::KC_W:
				mDirection.z -= mMove;
				break;

			case OIS::KC_DOWN:
			case OIS::KC_S:
				mDirection.z += mMove;
				break;

			case OIS::KC_LEFT:
			case OIS::KC_A:
				mDirection.x -= mMove;
				break;

			case OIS::KC_RIGHT:
			case OIS::KC_D:
				mDirection.x += mMove;
				break;

			case OIS::KC_PGDOWN:
			case OIS::KC_E:
				mDirection.y -= mMove;
				break;

			case OIS::KC_PGUP:
			case OIS::KC_Q:
				mDirection.y += mMove;
				break;

			}

			return true;
		}
		//当按键被释放
		bool keyReleased(const OIS::KeyEvent &e)
		{
            switch(e.key)
			{
			case OIS::KC_UP:
			case OIS::KC_W:
				mDirection.z += mMove;         
				break;
           
			case OIS::KC_DOWN:
			case OIS::KC_S:
				mDirection.z -= mMove;
				break;

			case OIS::KC_LEFT:
			case OIS::KC_A:
				mDirection.x += mMove;
				break;

			case OIS::KC_RIGHT:
			case OIS::KC_D:
				mDirection.x -= mMove;
				break;

			case OIS::KC_PGDOWN:
			case OIS::KC_Q:
				mDirection.y += mMove;
				break;

			case OIS::KC_PGUP:
			case OIS::KC_E:
				mDirection.y -= mMove;
				break;
			}
			return true;
		}

	protected:
		Real mRotate;
		Real mMove;

		SceneManager *mSceneMgr;
		SceneNode *mCamNode;
		bool mContinue;     //    是否继续渲染
		Vector3 mDirection;
		


};

class TutorialApplication:public ExampleApplication
{
public:
		TutorialApplication()
	{}
	~TutorialApplication()
	{}
protected:
		void createCamera(void)
	{
		mCamera = mSceneMgr->createCamera("PlayerCam");
		mCamera->setNearClipDistance(5);
		
	}
	void createScene(void)
	{
		//创建一个很暗的光环境
		mSceneMgr->setAmbientLight(ColourValue(0.25,0.25,0.25));
		//添加忍者
		Entity *ent=mSceneMgr->createEntity("Ninja","ninja.mesh");
		SceneNode *node=mSceneMgr->getRootSceneNode()->createChildSceneNode("NinjaNode");
		node->attachObject(ent);
		//创建一个白色光，与忍者有一小段距离
		Light *light=mSceneMgr->createLight("light1");
		light->setType(Light::LT_POINT);
		light->setPosition(Vector3(250,150,250));
		light->setDiffuseColour(ColourValue::White);      //漫反射颜色
		light->setSpecularColour(ColourValue::White);   //镜面反射的颜色
		//创建节点绑定相机
		node=mSceneMgr->getRootSceneNode()->createChildSceneNode("CamNode1",Vector3(-400,200,400));
		node->yaw(Degree(-45));
		node->attachObject(mCamera);
		//再创建一个相机
		node=mSceneMgr->getRootSceneNode()->createChildSceneNode("CamNode2",Vector3(0,200,400));
       
 
	}
	void createFrameListener(void)
	{
		//创建帧监听
		mFrameListener = new TutorialFrameListener(mWindow,mCamera,mSceneMgr);
		mRoot->addFrameListener(mFrameListener);
		//显示帧频
		mFrameListener->showDebugOverlay(true);

	}
};

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#define WIN32_LEAN_AND_MEAN
#include "windows.h"
INT WINAPI WinMain( HINSTANCE hInst, HINSTANCE, LPSTR strCmdLine,
				   INT )
#else
int main(int argc, char **argv)
#endif
{
	// Create application object
	TutorialApplication app;
	try {
		app.go();
	} catch( Exception& e ) {
#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
		MessageBox( NULL, e.getFullDescription().c_str(), "An exception has occured!", MB_OK | MB_ICONERROR | MB_TASKMODAL);
#else
		fprintf(stderr, "An exception has occured: %s\n",
			e.getFullDescription().c_str());
#endif
	}return 0;

}
